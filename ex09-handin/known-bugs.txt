* Bugs
- Exceptions are propagated further or editor is killed after printing
  stacktrace. -- No error handling.

- Just tagged stuff as Serializable without caring for the implications.

- Sometimes upon connecting after a disconnect:
  IllegalArgumentException: Invalid remove
  -- Does area.setText("") trigger TextRemoveEvent? Make an event
  instead, but also difficult. Somehow there are remove events there at
  the beginning that shouldn't be there. Seems as if there was residual
  stuff in some queue.

- Some of the queue stuff would be better done with observer pattern.
  -- Thread.interrupt() might be interesting.

- With the boolean server flag, edits close to each other can be
  unintuitive. Priorities might fix it.

- Inserts into region to be deleted are thrown away. -- Not very nice.

- If the TextRemoveEvent were more intelligent (fx understand negative
  lengths), we might be able to merge some cases in xform.

- The transformer is not correct. -- Invalid inserts and removals
  happen.

- Consider passing 'this' to the EventReplayer instead of everything
  separately.

- When a connected editor is shut down, the other side dies, too. There
  is no simple fix for that since we'd have to wait for the connection
  to be shut down properly before calling System.exit(0).

- It is possible to put DisconnectEvents in the queue (by pressing
  Disconnect), when the editors are not connected. As a result, they
  disconnect immediately after the next connection setup.

- There is no indication that an editor is listening or connected.

- The "Save file?" dialogs are quite annoying.

- Sometimes the assertion that the original texts of the local and
  received events be equal, fails.

- We might introduce an EmptyTextEvent in order to replace
  TextInsertEvent(0, "") and TextRemoveEvent(0, 0).

- Unrelated Connect- and DisconnectEvents during server switching are
  not handled properly. For instance, if the new server is in the
  process of adopting clients, an unrelated ConnectEvent would disturb
  the counting.

- When we move ther server to another computer, the local changes do
  not show up on all clients.

- Forwarding of server information is not implemented.

- Illegal insert if we type too fast.

- In order to stop the connection listener when the server shuts down I
  had to add a timeout with periodical check of the interrupt status.
  This is ugly. Furthermore, the dying server currently waits for that
  timeout to time out, so the server moving time might be longer than
  ACCEPT_TIMEOUT.

- When the server is moved from editor A to editor B, editor B will make
  it listen on the port that was in the listen port text field when the
  client at editor B was started. Thus, one cannot change the listen
  port as long as the client is in a session. Instead, the listening
  should always start on the port that is *currently* specified in the
  text field.

- Look at the changes in the commit which introduced this line (and
  maybe the commit after that) and think about whether they didn't do
  anything problematic.

* Fixed bugs
x When listening, the menu doesn't hang around anymore, but the
  interface freezes nonetheless.

x Because the DisconnectEvent MyTextEvent, it has to call its
  constructor with a length. This is ugly and a result of implementation
  inheritance. Bad.

x Sometimes after disconnecting message in both editors, sometimes not.

x Rename MyTextEvent to something

x Make display queue and outqueue more specific

x Rename *replay* to *display*
* Future considerations
- Seperate managing of connections and managing text
- Other OT-algos
- Better way to close threads
- Queues may not be the idiomatic way of doing this in java.

